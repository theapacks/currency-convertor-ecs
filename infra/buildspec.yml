version: 0.2

phases:
  install:
    on-failure: ABORT
    commands:
      - echo "=== INSTALL PHASE ==="
      - echo "Installing prerequisites..."
      - yum update -y
      - yum install -y jq unzip
      - echo "Validating required environment variables..."
      - |
        for var in AWS_ACCOUNT_ID AWS_DEFAULT_REGION ECR_REPOSITORY_NAME DOCKERFILE_BUCKET; do
          if [ -z "${!var}" ]; then
            echo "ERROR: Required environment variable $var is not set"
            exit 1
          fi
          echo "$var = ${!var}"
        done
      - echo "=== INSTALL COMPLETE ==="

  pre_build:
    commands:
      - echo "=== PRE-BUILD PHASE ==="
      - echo "Logging in to Amazon ECR..."
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
      - REPOSITORY_URI=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/${ECR_REPOSITORY_NAME}
      - echo "Repository URI is $REPOSITORY_URI"
      - echo "Installing Trivy security scanner..."
      - curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
      - IMAGE_TAG=$(date +%Y%m%d%H%M%S)-${CODEBUILD_BUILD_NUMBER:-latest}
      - echo "Image tag is $IMAGE_TAG"
      - echo "=== PRE-BUILD COMPLETE ==="

  build:
    commands:
      - echo "=== BUILD PHASE ==="
      - echo "Build started on $(date)"
      - echo "Downloading application code from S3..."
      - aws s3 cp s3://$DOCKERFILE_BUCKET/app.zip ./app.zip
      - echo "Extracting application code..."
      - unzip -q app.zip
      - echo "Building the Docker image..."
      - docker build -t $REPOSITORY_URI:$IMAGE_TAG .
      - echo "Running security scan..."
      - trivy image --severity CRITICAL,HIGH $REPOSITORY_URI:$IMAGE_TAG
      - echo "=== BUILD COMPLETE ==="

  post_build:
    commands:
      - echo "=== POST-BUILD PHASE ==="
      - echo "Build completed on $(date)"
      - echo "Pushing the Docker image..."
      - docker push $REPOSITORY_URI:$IMAGE_TAG
      - echo "Image pushed successfully with tag $IMAGE_TAG"
      - echo "Updating ECS service..."
      - |
        if [ -n "$ECS_CLUSTER_NAME" ] && [ -n "$ECS_SERVICE_NAME" ]; then
          echo "Updating ECS service $ECS_SERVICE_NAME in cluster $ECS_CLUSTER_NAME"
          
          # Get current task definition
          echo "Getting current task definition..."
          CURRENT_TASK_DEF=$(aws ecs describe-services --cluster $ECS_CLUSTER_NAME --service $ECS_SERVICE_NAME --region $AWS_DEFAULT_REGION --query 'services[0].taskDefinition' --output text)
          
          if [ "$CURRENT_TASK_DEF" = "None" ] || [ -z "$CURRENT_TASK_DEF" ]; then
            echo "Failed to get current task definition"
            exit 1
          fi
          
          echo "Current task definition: $CURRENT_TASK_DEF"
          
          # Download current task definition
          echo "Downloading current task definition..."
          aws ecs describe-task-definition --task-definition $CURRENT_TASK_DEF --region $AWS_DEFAULT_REGION --query 'taskDefinition' > task-def.json
          
          # Update image URI in task definition
          echo "Updating image URI to: $REPOSITORY_URI:$IMAGE_TAG"
          jq --arg IMAGE "$REPOSITORY_URI:$IMAGE_TAG" '.containerDefinitions[0].image = $IMAGE | del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .placementConstraints, .compatibilities, .registeredAt, .registeredBy)' task-def.json > new-task-def.json
          
          # Register new task definition
          echo "Registering new task definition..."
          NEW_TASK_DEF_ARN=$(aws ecs register-task-definition --cli-input-json file://new-task-def.json --region $AWS_DEFAULT_REGION --query 'taskDefinition.taskDefinitionArn' --output text)
          
          if [ "$NEW_TASK_DEF_ARN" = "None" ] || [ -z "$NEW_TASK_DEF_ARN" ]; then
            echo "Failed to register new task definition"
            exit 1
          fi
          
          echo "New task definition ARN: $NEW_TASK_DEF_ARN"
          
          # Update service with new task definition
          echo "Updating ECS service with new task definition..."
          aws ecs update-service --cluster $ECS_CLUSTER_NAME --service $ECS_SERVICE_NAME --task-definition $NEW_TASK_DEF_ARN --region $AWS_DEFAULT_REGION
          echo "ECS service update initiated with new image"
          
          # Cleanup
          rm -f task-def.json new-task-def.json
        else
          echo "ECS environment variables not set, skipping service update"
        fi
      - echo "=== POST-BUILD COMPLETE ==="
